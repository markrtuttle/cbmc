name: Package CBMC
on: [push]

jobs:
  Tags:
    name: Generate package tag
    runs-on: ubuntu-latest
    outputs:
      time: ${{ steps.time.outputs.time }}
      sha: ${{ steps.sha.outputs.sha }}
      runid: ${{ steps.runid.outputs.runid }}
      runnum: ${{ steps.runnum.outputs.runnum }}
      version: ${{ steps.version.outputs.version }}
      opentag: ${{ steps.opentag.outputs.opentag }}
      closedtag: ${{ steps.closedtag.outputs.closedtag }}
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v2

      - id: time
        run: |
          TIME=$(date --utc +%Y%m%dT%H%M%SZ)
          echo "::set-output name=time::${TIME}"

      - id: sha
        run: |
          SHA=${{ github.sha }}
          echo "::set-output name=sha::${SHA:0:8}"

      - id: runid
        run: |
          ID=${{ github.run_id }}
          echo "::set-output name=runid::${ID}"

      - id: runnum
        run: |
          NUM=${{ github.run_number }}
          echo "::set-output name=runnum::${NUM}"

      - id: version
        run: |
          VERSION=$(grep CBMC_VERSION src/config.inc | sed 's/.*= *//')
          echo "::set-output name=version::${VERSION}"

      - id: opentag
        run: echo "::set-output name=opentag::${{ steps.version.outputs.version }} ${{ steps.time.outputs.time }} ${{ steps.sha.outputs.sha }}"

      - id: closedtag
        run: echo "::set-output name=closedtag::${{ steps.version.outputs.version }}-${{ steps.time.outputs.time }}-${{ steps.sha.outputs.sha }}"

      - name: echo
        run: |
          echo TIME = ${{ steps.time.outputs.time }}
          echo SHA = ${{ steps.sha.outputs.sha }}
          echo RUN ID = ${{ steps.runid.outputs.runid }}
          echo RUN NUMBER = ${{ steps.runnum.outputs.runnum }}
          echo VERSION = ${{ steps.version.outputs.version }}
          echo OPEN TAG = ${{ steps.opentag.outputs.opentag }}
          echo CLOSED TAG = ${{ steps.closedtag.outputs.closedtag }}

#  Ubuntu16:
#    name: Ubuntu 16 package
#    runs-on: ubuntu-16.04
#    needs: Tags
#    env:
#      OS: ubuntu16
#      PKG: cbmc_${{ needs.Tags.outputs.closedtag }}-ubuntu16_amd64.deb
#      PKGDIR: cbmc
#    steps:
#
#      - name: Checkout the repository
#        uses: actions/checkout@v2
#
#      - name: Update the submodules
#        run: git submodule update --init
#
#      - name: Install bison, flex, and ninja
#        run: sudo apt-get install bison flex ninja-build
#
#      - name: Configure with cmake
#        run: cmake -S. -Bbuild -GNinja
#
#      - name: Build with cmake
#        run: cmake --build build
#
#      - name: Create the Debian package
#        run: |
#          mkdir -p ${PKGDIR}/usr/bin
#          cp build/bin/cbmc ${PKGDIR}/usr/bin
#          cp build/bin/goto-analyzer ${PKGDIR}/usr/bin
#          cp build/bin/goto-cc ${PKGDIR}/usr/bin
#          cp build/bin/goto-diff ${PKGDIR}/usr/bin
#          cp build/bin/goto-gcc ${PKGDIR}/usr/bin
#          cp build/bin/goto-harness ${PKGDIR}/usr/bin
#          cp build/bin/goto-instrument ${PKGDIR}/usr/bin
#          cp build/bin/goto-ld ${PKGDIR}/usr/bin
#          cp build/bin/janalyzer ${PKGDIR}/usr/bin
#          cp build/bin/java-unit ${PKGDIR}/usr/bin
#          cp build/bin/jbmc ${PKGDIR}/usr/bin
#          cp build/bin/jdiff ${PKGDIR}/usr/bin
#
#          mkdir -p ${PKGDIR}/usr/share/man/man1
#          cp doc/man/cbmc.1 ${PKGDIR}/usr/share/man/man1
#
#          mkdir ${PKGDIR}/DEBIAN
#          set -- `du -ks ${PKGDIR}`
#          SIZE=$1
#          VERSION=${{ needs.Tags.outputs.version }}
#          cat .github/workflows/${OS}/control | sed "s/VERSION/${VERSION}/" | sed "s/SIZE/${SIZE}/" > ${PKGDIR}/DEBIAN/control
#
#          dpkg-deb --build ${PKGDIR} ${PKG}
#
#      - name: Upload the Debian package
#        uses: actions/upload-artifact@v1
#        with:
#          name: Ubuntu16 ${{ needs.Tags.outputs.opentag }}
#          path: ${{ env.PKG }}

  Ubuntu18:
    name: Ubuntu 18 package
    runs-on: ubuntu-18.04
    needs: Tags
    env:
      OS: ubuntu18
      PKG: cbmc_${{ needs.Tags.outputs.closedtag }}-ubuntu18_amd64.deb
      PKGDIR: cbmc
    steps:

#      - name: Checkout the repository
#        uses: actions/checkout@v2

#      - name: Update the submodules
#        run: git submodule update --init

      - name: Install bison, flex, and ninja
        run: sudo apt-get install bison flex ninja-build

#      - name: Configure with cmake
#        run: cmake -S. -Bbuild -GNinja

#      - name: Build with cmake
#        run: cmake --build build

#      - name: Create the Debian package
#        run: |
#          mkdir -p ${PKGDIR}/usr/bin
#          cp build/bin/cbmc ${PKGDIR}/usr/bin
#          cp build/bin/goto-analyzer ${PKGDIR}/usr/bin
#          cp build/bin/goto-cc ${PKGDIR}/usr/bin
#          cp build/bin/goto-diff ${PKGDIR}/usr/bin
#          cp build/bin/goto-gcc ${PKGDIR}/usr/bin
#          cp build/bin/goto-harness ${PKGDIR}/usr/bin
#          cp build/bin/goto-instrument ${PKGDIR}/usr/bin
#          cp build/bin/goto-ld ${PKGDIR}/usr/bin
#          cp build/bin/janalyzer ${PKGDIR}/usr/bin
#          cp build/bin/java-unit ${PKGDIR}/usr/bin
#          cp build/bin/jbmc ${PKGDIR}/usr/bin
#          cp build/bin/jdiff ${PKGDIR}/usr/bin
#
#          mkdir -p ${PKGDIR}/usr/share/man/man1
#          cp doc/man/cbmc.1 ${PKGDIR}/usr/share/man/man1
#
#          mkdir ${PKGDIR}/DEBIAN
#          set -- `du -ks ${PKGDIR}`
#          SIZE=$1
#          VERSION=${{ needs.Tags.outputs.version }}
#          cat .github/workflows/${OS}/control | sed "s/VERSION/${VERSION}/" | sed "s/SIZE/${SIZE}/" > ${PKGDIR}/DEBIAN/control
#
#          dpkg-deb --build ${PKGDIR} ${PKG}

      - name: Build the Debian package
        run: |
          make -C .github/workflows/ubuntu18
          ls .github/workflows/ubuntu18
          cp .github/workflows/ubuntu18/*.deb .
          ls
          mv *.deb ${PKG}

      - name: Upload the Debian package
        uses: actions/upload-artifact@v1
        with:
          name: Ubuntu18 ${{ needs.Tags.outputs.opentag }}
          path: ${{ env.PKG }}

#  MacOS:
#    name: MacOS package
#    runs-on: macos-10.15
#    needs: Tags
#    env:
#      OS: macos
#      PKG: cbmc-${{ needs.Tags.outputs.closedtag }}-macos1015.tar.gz
#      PKGDIR: cbmc
#    steps:
#
#      - name: Checkout the repository
#        uses: actions/checkout@v2
#
#      - name: Update the submodules
#        run: git submodule update --init
#
#      - name: Install cmake, ninja, jdk, and maven
#        run: |
#          brew install cmake
#          brew install ninja
#          brew install openjdk
#          brew install maven
#
#      - name: Configure with cmake
#        # See https://github.com/diffblue/cbmc/issues/4956 for clang issue
#        run: cmake -S. -Bbuild -DCMAKE_C_COMPILER=/usr/bin/clang -GNinja
#
#      - name: Build with cmake
#        run: cmake --build build
#
#      - name: Create the package
#        run: |
#          mkdir -p ${PKGDIR}
#          cp build/bin/cbmc ${PKGDIR}
#          cp build/bin/goto-analyzer ${PKGDIR}
#          cp build/bin/goto-cc ${PKGDIR}
#          cp build/bin/goto-diff ${PKGDIR}
#          cp build/bin/goto-gcc ${PKGDIR}
#          cp build/bin/goto-harness ${PKGDIR}
#          cp build/bin/goto-instrument ${PKGDIR}
#          cp build/bin/goto-ld ${PKGDIR}
#          cp build/bin/janalyzer ${PKGDIR}
#          cp build/bin/java-unit ${PKGDIR}
#          cp build/bin/jbmc ${PKGDIR}
#          cp build/bin/jdiff ${PKGDIR}
#
#          mkdir -p ${PKGDIR}/man/man1
#          cp doc/man/cbmc.1 ${PKGDIR}
#
#          tar fcz ${PKG} ${PKGDIR}
#
#      - name: Upload the package
#        uses: actions/upload-artifact@v1
#        with:
#          name: MacOS ${{ needs.Tags.outputs.opentag }}
#          path: ${{ env.PKG }}
#
#  VS2019:
#    name: Windows VS2019 installer
#    runs-on: windows-2019
#    needs: Tags
#    env:
#      OS: vs2019
#      PKG: cbmc_${{ needs.Tags.outputs.closedtag }}-vs2019.msi
#      PKGDIR: cbmc
#    defaults:
#      run:
#         shell: cmd
#    steps:
#
#      - name: Checkout the repository
#        uses: actions/checkout@v2
#
#      - name: Update the submodules
#        run: git submodule update --init
#
#      - name: Install bison and flex
#        run: .github\workflows\vs2019\install-bison.bat
#
#      - name: Patch cbmc
#        run: .github\workflows\vs2019\patch-cbmc.bat
#
#      - name: Build cbmc
#        run: .github\workflows\vs2019\build-cbmc.bat
#
#      - name: Build the installer
#        run: .github\workflows\vs2019\build-installer.bat ${{ env.PKG }}
#
#      - name: Upload the installer
#        uses: actions/upload-artifact@v1
#        with:
#          name: Windows VS2019 ${{ needs.Tags.outputs.opentag }}
#          path: ${{ env.PKG }}
#
#
