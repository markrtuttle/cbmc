name: Package CBMC
on: [push]

jobs:
  Tags:
    #
    # Generate a set of values (like a single timestamp and package name)
    # that can be used consistently by the subsequent jobs building
    # the packages.
    #
    name: Generate package tag
    runs-on: ubuntu-latest
    outputs:
      time: ${{ steps.time.outputs.time }}
      sha: ${{ steps.sha.outputs.sha }}
      runid: ${{ steps.runid.outputs.runid }}
      runnum: ${{ steps.runnum.outputs.runnum }}
      version: ${{ steps.version.outputs.version }}
      opentag: ${{ steps.opentag.outputs.opentag }}
      closedtag: ${{ steps.closedtag.outputs.closedtag }}
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v2

      - id: time
        run: |
          TIME=$(date --utc +%Y%m%dT%H%M%SZ)
          echo "::set-output name=time::${TIME}"

      - id: sha
        run: |
          SHA=${{ github.sha }}
          echo "::set-output name=sha::${SHA:0:8}"

      - id: runid
        run: |
          ID=${{ github.run_id }}
          echo "::set-output name=runid::${ID}"

      - id: runnum
        run: |
          NUM=${{ github.run_number }}
          echo "::set-output name=runnum::${NUM}"

      - id: version
        run: |
          VERSION=$(grep CBMC_VERSION src/config.inc | sed 's/.*= *//')
          echo "::set-output name=version::${VERSION}"

      - id: opentag
        #
        # This is the string used to name the package artifact
        # uploaded to GitHub.  The javascript on the web page scanning
        # the list of stored package artifacts assumes the artifact
        # name has the form
        #   OS VERSION TIMESTAMP SHA RUNID
        # and parses these names to identify the stable and latest
        # packages for a given operating system, and to identify the
        # workflow run that generated them.
        #
        run: echo "::set-output name=opentag::${{ steps.version.outputs.version }} ${{ steps.time.outputs.time }} ${{ steps.sha.outputs.sha }} ${{ steps.runid.outputs.runid }}"

      - id: closedtag
        #
        # This is the string used to name the package itself that is
        # included in the package artifact uploaded to GitHub.  It is
        # probably enough to include just the version and sha, but
        # including the timestamp makes them sort into a reasonable
        # order in directory listings.
        #
        run: echo "::set-output name=closedtag::${{ steps.version.outputs.version }}-${{ steps.time.outputs.time }}-${{ steps.sha.outputs.sha }}"

      - name: echo
        run: |
          echo TIME = ${{ steps.time.outputs.time }}
          echo SHA = ${{ steps.sha.outputs.sha }}
          echo RUN ID = ${{ steps.runid.outputs.runid }}
          echo RUN NUMBER = ${{ steps.runnum.outputs.runnum }}
          echo VERSION = ${{ steps.version.outputs.version }}
          echo OPEN TAG = ${{ steps.opentag.outputs.opentag }}
          echo CLOSED TAG = ${{ steps.closedtag.outputs.closedtag }}

  Ubuntu16:
    name: Ubuntu 16 package
    runs-on: ubuntu-16.04
    needs: Tags
    env:
      VERSION: ${{ needs.Tags.outputs.version }}
      ARTIFACT_NAME: Ubuntu16 ${{ needs.Tags.outputs.opentag }}
      PACKAGE_NAME: cbmc_${{ needs.Tags.outputs.closedtag }}-ubuntu16_amd64.deb
      PKGDIR: cbmc
      SCRIPT_DIR: .github/workflows/ubuntu16
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Update the submodules
        run: git submodule update --init

      - name: Create the package
        run: make -f ${SCRIPT_DIR}/Makefile SCRIPT_DIR=${SCRIPT_DIR} PACKAGE_NAME=${PACKAGE_NAME}

      - name: Upload the Debian package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PACKAGE_NAME }}

  Ubuntu18:
    name: Ubuntu 18 package
    runs-on: ubuntu-18.04
    needs: Tags
    env:
      VERSION: ${{ needs.Tags.outputs.version }}
      ARTIFACT_NAME: Ubuntu18 ${{ needs.Tags.outputs.opentag }}
      PACKAGE_NAME: cbmc_${{ needs.Tags.outputs.closedtag }}-ubuntu18_amd64.deb
      PKGDIR: cbmc
      SCRIPT_DIR: .github/workflows/ubuntu18
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Update the submodules
        run: git submodule update --init

      - name: Create the package
        run: make -f ${SCRIPT_DIR}/Makefile SCRIPT_DIR=${SCRIPT_DIR} PACKAGE_NAME=${PACKAGE_NAME}

      - name: Upload the Debian package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PACKAGE_NAME }}

  MacOS:
    name: MacOS package
    runs-on: macos-10.15
    needs: Tags
    env:
      PACKAGE_NAME: cbmc-${{ needs.Tags.outputs.closedtag }}-macos1015.tar.gz
      ARTIFACT_NAME: MacOS ${{ needs.Tags.outputs.opentag }}
      SCRIPT_DIR: .github/workflows/macos15
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Update the submodules
        run: git submodule update --init

      - name: Build the package
        run: |
          make -f ${SCRIPT_DIR}/Makefile
          mv cbmc-latest.tar.gz ${PACKAGE_NAME}

      - name: Upload the package
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PACKAGE_NAME }}

  VS2019:
    name: Windows VS2019 installer
    runs-on: windows-2019
    needs: Tags
    env:
      ARTIFACT_NAME: Windows VS2019 ${{ needs.Tags.outputs.opentag }}
      PACKAGE_NAME: cbmc_${{ needs.Tags.outputs.closedtag }}-vs2019.msi
      SCRIPT_DIR: .github\workflows\vs2019
      # TODO: Figure out how to use %SCRIPT_DIR% as the Windows environment variable in the command shell
    defaults:
      run:
         shell: cmd
    steps:

      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Update the submodules
        run: git submodule update --init

      - name: Install bison and flex
        run: ${{ env.SCRIPT_DIR }}\install-bison.bat

      - name: Patch cbmc
        run: ${{ env.SCRIPT_DIR }}\patch-cbmc.bat

      - name: Build cbmc
        run: ${{ env.SCRIPT_DIR }}\build-cbmc.bat

      - name: Build the installer
        run: ${{ env.SCRIPT_DIR }}\build-installer.bat %%PACKAGE_NAME%%

      - name: Upload the installer
        uses: actions/upload-artifact@v1
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ env.PACKAGE_NAME }}
