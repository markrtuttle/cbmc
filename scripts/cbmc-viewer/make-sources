#!/usr/bin/env python3

# Use emacs python mode
# -*- mode: python-mode -*-

"""List the source files used to buid a goto binary."""

import json
import argparse
import logging
import os
import platform

import make_sources

################################################################
# Argument parsing

def create_parser():
    """Build the command line parser."""

    parser = argparse.ArgumentParser(
        description='List the source files used to build a goto binary.')

    parser.add_argument(
        '--blddir',
        metavar='BLD',
        help="""
	The build directory.
        If this flag is specified, construct the list of source files
	using the goto-cc preprocessor.  The command "make
	GOTO_CC=goto-cc goto" in this directory should build the cbmc
	goto binary, and the output written to stdout by the build
	process should include every invocation of goto-cc in the
	build.  If this flag is not specified, construct the list of
	source files by listing files under the root of the source tree.
	"""
    )
    parser.add_argument(
        '--srcdir',
        metavar='SRC',
        required=True,
        help="""
        The root of the source tree.
        The build directory is usually under the root of the source
        tree, but it doesn't have to be.
        """
    )
    parser.add_argument(
        '--srcexclude',
        metavar='RE',
        help="""
        A regular expression matching source files that should be
        excluded from the list of source files.  This is used only
        when BLD is not specified and the list of source files is
        constructed by listing files under SRC.
        """
    )
    parser.add_argument(
        '--merge',
        metavar='FILE',
        nargs='+',
        help="""
        A list of files produced by this program to merge into a
        single file.
        """
    )
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='Verbose output'
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Debugging output'
    )
    return parser

def main():
    """Gather names of source files used to buid a goto binary."""

    args = create_parser().parse_args()
    if args.verbose:
        logging.basicConfig(level=logging.INFO)
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    if args.merge:
        print(json.dumps(make_sources.merge(args.merge), indent=2))
        exit()

    if args.blddir:
        result = make_sources.sources_found_using_make(args.blddir,
                                                       args.srcdir)
    else:
        args.srcdir = os.path.abspath(args.srcdir)
        if platform.system() == 'Windows':
            # Windows does not have the faster find command
            result = make_sources.sources_found_using_walk(args.srcdir,
                                                           args.srcexclude)
        else:
            result = make_sources.sources_found_using_find(args.srcdir,
                                                           args.srcexclude)

    print(json.dumps(result, indent=2))

if __name__ == '__main__':
    main()
