#!/usr/bin/env python3

# Use emacs python mode
# -*- mode: python-mode -*-

"""Extract traces from cbmc output."""

import json
import argparse
import logging

import make_traces

################################################################
# Argument parsing

def create_parser():
    """Build the command line parser."""

    parser = argparse.ArgumentParser(
        description='Extract traces from cbmc output.')

    parser.add_argument(
        '--results',
        metavar='FILE',
        required=True,
        help="""
        Name of the file containing the output of cbmc.
        """
    )
    parser.add_argument(
        '--blddir',
        metavar='BLD',
        help="""
        The build directory.  This is the directory in which goto-cc
        was invoked.  Source locations generated by cbmc occassionally
        include relative pathnames that are relative to a working
        directory, but the text output of cbmc omits the working
        directory, making it hard to generate a reliable absolute
        paths to source files.  When the build directory is specified
        and the working directory is missing, the build directory will
        be used to generate an absolute path to the source file.
        """
    )
    parser.add_argument(
        '--srcdir',
        metavar='SRC',
        help="""
        The root of the source tree.  This can be any directory above
        the "interesting" code in the project.  When the source root
        is specified, the source locations will be "cleaned up" to
        give the source root as the working directory, and to give
        relative paths to source files under the source root (relative
        to the source root) and absolute paths to all other source
        files.  This improves the reliability of links from source
        locations in traces to source code.
        """
    )
    parser.add_argument(
        '--txt',
        action='store_true',
        help="""
        The output is a text file, assumed for files ending in .txt.
        """
    )
    parser.add_argument(
        '--json',
        action='store_true',
        help="""
        The output is a JSON file, assumed for files ending in .json.
        """
    )
    parser.add_argument(
        '--verbose',
        action='store_true',
        help='Verbose output'
    )
    parser.add_argument(
        '--debug',
        action='store_true',
        help='Debugging output'
    )
    return parser

def main():
    """Extract traces from cbmc output."""

    args = create_parser().parse_args()
    if args.verbose:
        logging.basicConfig(level=logging.INFO)
    if args.debug:
        logging.basicConfig(level=logging.DEBUG)

    if args.txt and args.json:
        raise UserWarning("Can't use both options --txt and --json")

    traces = make_traces.traces_from_cbmc(args.results,
                                          args.blddir, args.srcdir,
                                          args.txt, args.json)
    print(json.dumps(traces, indent=2))

if __name__ == '__main__':
    main()
