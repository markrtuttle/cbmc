"""Source files used to build a goto binary."""

import os
import json
import subprocess
import platform
import re

def get_sources_from_json(srcfiles):
    """Generate the list of source files by reading json file generated by source-files."""

    with open(srcfiles) as handle:
        data = json.load(handle)
    return os.path.abspath(data['root']), sorted(data['files'])

def get_sources_with_find(srcdir):
    """Generate the list of source files with the Linux find commands."""

    try:
        cmd = ["find", "-L", ".", "(", "-iname", "*.[ch]", "-or", "-iname", "*.inl", ")"]
        result = subprocess.run(cmd, capture_output=True, text=True, check=True, cwd=srcdir)
        return sorted(result.stdout.splitlines())
    except subprocess.CalledProcessError:
        raise UserWarning('Failed to run command "{}"'.format(' '.join(cmd)))

def get_sources_with_walk(srcdir):
    """Generate the list of source files with the Python os.walk method."""

    files = []
    cwd = os.getcwd()
    try:
        os.chdir(srcdir)
        for path, _, names in os.walk('.'):
            files.extend([os.path.join(path, name) for name in names])
    except FileNotFoundError:
        raise UserWarning('Source directory not found: {}'.format(srcdir))
    finally:
        os.chdir(cwd)
    return sorted(files)

class Sources:
    """Source files used to build a goto binary."""

    def __init__(self, srcdir, srcfiles=None, srcexclude=None):
        self.srcroot = None
        self.srcfiles = []

        if srcfiles:
            self.srcroot, self.srcfiles = get_sources_from_json(srcfiles)
        else:
            self.srcroot = os.path.abspath(srcdir)
            if platform.system() == 'Windows':
                # Windows does not have the faster find command
                self.srcfiles = get_sources_with_walk(self.srcroot)
            else:
                self.srcfiles = get_sources_with_find(self.srcroot)
            if srcexclude:
                self.srcfiles = [name for name in self.srcfiles
                                 if not re.match(srcexclude, name)]

        self.srcfiles = [name for name in self.srcfiles
                         if name.endswith(('.c', '.C', '.h', '.H', '.inl'))]


    def files(self):
        """List of source files."""
        return self.srcfiles

    def root(self):
        """Root of source directory."""
        return self.srcroot
